{"version":3,"file":"Dataset.js","sources":["../../src/i18n/en.js","../../src/Dataset.vue"],"sourcesContent":["export default {\n  show: 'Show',\n  entries: 'entries',\n  previous: 'Previous',\n  next: 'Next',\n  showing: 'Showing',\n  showingTo: 'to',\n  showingOf: 'of',\n  showingEntries: 'entries'\n}\n","<template>\n  <div>\n    <slot\n      :ds=\"{\n        dsIndexes: indexes,\n        dsShowEntries,\n        dsResultsNumber,\n        dsPage,\n        dsPagecount,\n        dsFrom,\n        dsTo,\n        dsData,\n        dsRows,\n        dsPages,\n        search,\n        showEntries,\n        setActive\n      }\"\n    ></slot>\n  </div>\n</template>\n\n<script>\nimport datasetI18n from './i18n/en.js'\nimport { createPagingRange, fieldFilter, fieldSorter, findAny, isEmptyObject } from './helpers'\n\nexport default {\n  provide() {\n    return {\n      search: this.search,\n      showEntries: this.showEntries,\n      setActive: this.setActive,\n      datasetI18n: this.datasetI18n,\n      /* Setup reactive provides */\n      rdsIndexes: () => this.indexes,\n      rdsData: () => this.dsData,\n      rdsRows: () => this.dsRows,\n      rdsPages: () => this.dsPages,\n      rdsResultsNumber: () => this.dsResultsNumber,\n      rdsPagecount: () => this.dsPagecount,\n      rdsFrom: () => this.dsFrom,\n      rdsTo: () => this.dsTo,\n      rdsPage: () => this.dsPage\n    }\n  },\n  props: {\n    dsData: {\n      type: Array,\n      default: () => []\n    },\n    dsFilterFields: {\n      type: Object,\n      default: () => ({})\n    },\n    dsSortby: {\n      type: Array,\n      default: () => []\n    },\n    dsSearchIn: {\n      type: Array,\n      default: () => []\n    },\n    dsSearchAs: {\n      type: Object,\n      default: () => ({})\n    },\n    dsSortAs: {\n      type: Object,\n      default: () => ({})\n    }\n  },\n  data: function () {\n    return {\n      dsPage: 1,\n      dsSearch: '',\n      dsShowEntries: 10,\n      datasetI18n,\n      indexes: []\n    }\n  },\n  computed: {\n    whenChanged() {\n      /* eslint-disable no-unused-expressions */\n      this.dsData\n      this.dsSearch\n      this.dsSortby\n      this.dsFilterFields\n      this.dsSearchIn\n      this.dsSearchAs\n      this.dsSortAs\n\n      return Date.now()\n    },\n    dsRows() {\n      // We should not modify another computed property from inside a computed property\n      // This should be moved into the dsTo computed if needed\n      /*\n      if (this.dsTo <= 0) {\n        this.dsTo = this.indexes.length;\n      }\n      */\n      return this.indexes.slice(this.dsFrom, this.dsTo)\n    },\n    dsPages() {\n      return createPagingRange(this.dsPagecount, this.dsPage)\n    },\n    dsResultsNumber() {\n      return this.indexes.length\n    },\n    dsPagecount() {\n      return Math.ceil(this.dsResultsNumber / this.dsShowEntries)\n    },\n    dsFrom() {\n      return (this.dsPage - 1) * this.dsShowEntries\n    },\n    dsTo() {\n      return this.dsPage * this.dsShowEntries\n    }\n  },\n  watch: {\n    dsResultsNumber: {\n      handler(val, oldVal) {\n        // Reset active page when results change\n        this.setActive(1)\n      }\n    },\n    /*\n    The naive attempt would be to manipulate the original array directly.\n    This is problematic because it has to be filtered first, then sorted, then the from/to rows extracted.\n    In order to do that in that order, we would need to work on a copy.\n    But this is problematic as well since we'd loose the data-binding to the original array.\n\n    The trick is to work directly on the array indexes.\n    */\n    whenChanged: {\n      handler(newVal, oldVal) {\n        let result = []\n        const dsData = this.dsData\n        const dsSearch = this.dsSearch\n        const dsSortby = this.dsSortby\n        const dsFilterFields = this.dsFilterFields\n        const dsSearchIn = this.dsSearchIn\n        const dsSearchAs = this.dsSearchAs\n        const dsSortAs = this.dsSortAs\n\n        if (!dsSearch && !dsSortby.length && isEmptyObject(dsFilterFields)) {\n          // Skip processing and just get the indexes\n          result = dsData.map((val, i) => i)\n        } else {\n          // Index it\n          result = dsData.map((val, i) => ({ index: i, value: val }))\n\n          // Filter it by field\n          if (!isEmptyObject(dsFilterFields)) {\n            result = fieldFilter(result, dsFilterFields)\n          }\n\n          // Search it\n          if (dsSearch) {\n            result = result.filter((entry) => findAny(dsSearchIn, dsSearchAs, entry.value, dsSearch))\n          }\n\n          // Sort it\n          if (dsSortby.length) {\n            result.sort(fieldSorter(dsSortby, dsSortAs))\n          }\n\n          // We need only the indexes\n          result = result.map((entry) => entry.index)\n        }\n        this.indexes = result\n      },\n      immediate: true\n    }\n  },\n  methods: {\n    search(value) {\n      this.dsSearch = value\n    },\n    showEntries(value) {\n      this.dsShowEntries = value\n      this.$nextTick(() => {\n        if (this.dsPage > this.dsPagecount) {\n          this.setActive(this.dsPages[this.dsPages.length - 1])\n        }\n      })\n    },\n    setActive(value) {\n      this.dsPage = value\n    }\n  }\n}\n</script>\n"],"names":["this","let","const"],"mappings":"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"}